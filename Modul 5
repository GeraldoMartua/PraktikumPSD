library ieee;
use ieee.std_logic_1164.all;
use IEEE.std_logic_arith.all;
use IEEE.std_logic_unsigned.all;
 
 entity idiot is
  port( ALU: in std_logic_vector(8 downto 0);
	clk:in std_logic;
	storageA: inout std_logic_vector(8 downto 0);
	storageB: inout std_logic_vector(8 downto 0);
	rst:in std_logic;
	DA:inout std_logic;
	DB:inout std_logic;
	x:inout integer range 0 to 8;
	result:inout std_logic_vector(8 downto 0);
	temp:inout std_logic_vector(3 downto 0);
	shift:inout std_logic_vector(1 downto 0));
TYPE state_Type IS(A,B);
SIGNAL State : State_type;
end entity;

architecture why of idiot is


begin

process(clk,rst)
	begin
	if (rst='1') then
		state<=A;
		x<=1;
	elsif(clk'event and clk='1') then
		CASE State IS
			WHEN A=>
				DA<=storageA(x);
				DB<=storageB(x);
				if(DA='1' and DB='1')then
					result(x)<=storageA(x) OR storageB(x);
					state<=B;
					x<=x+1;
				else
					result(x)<=storageA(x) OR storageB(x);
					state<=A;
					x<=x+1;
				end if;		
			WHEN B=>								
				DA<=storageA(x);
				DB<=storageB(x);
				if(DA='1' and DB='1')then
					result(x)<=storageA(x) OR storageB(x);
					result(x)<=result(x) OR '1';
					state<=A;
					x<=x+1;
				else
					result(x)<=storageA(x) OR storageB(x);
					result(x)<=result(x) OR '1';
					state<=B;
					x<=x+1;
				end if;	
			
		end Case;
	end if;
end process;
end why;
			
