library ieee;
use IEEE.std_logic_1164.all;

entity FSM is
port (CLK : in std_logic; 
 RSTn : in std_logic; 
 CoinIn : in std_logic_vector (1 downto 0); 
 phone : out std_logic; 
 CoinOut : out std_logic_vector (1 downto 0) 
 );

end entity;

architecture behavior of FSM is

type state_type is (idle, 
 put_money, 
 in_1,in_3,in_6,in_5, 
 change_1, 
 phone_out 
 ); 
signal current_s,next_s: state_type; 

begin

process(CLK,RSTn)
begin
 if(RSTn = '0') then
 current_s <= idle; 
 elsif(clk'event and clk = '1') then
 current_s <= next_s;
 end if;
end process;

process(current_s,CoinIn)
begin
case current_s is
 when idle => 
 phone <= '0';
 CoinOut <= "00";
 next_s <= put_money;
 
 when put_money =>
 if(CoinIn = "00")then
 phone <= '0';
 CoinOut <= "00";
 next_s <= put_money;
 elsif(CoinIn = "01")then 
 phone <= '0';
 CoinOut <= "00";
 next_s <= in_1;
 elsif(CoinIn = "10")then 
 phone <= '0';
 CoinOut <= "00";
 next_s <= phone_out;
 elsif(CoinIn = "11")then 
 phone <= '0';
 CoinOut <= "00";
 next_s <= in_5;
 end if;

 when in_1 => 
 if(CoinIn = "00") then
 phone <= '0';
 CoinOut <= "00";
 next_s <= in_1;
 elsif(CoinIn = "01") then
 phone <= '0';
 CoinOut <= "00";
 next_s <= phone_out;
 elsif(CoinIn = "10") then
 phone <= '0';
 CoinOut <= "00";
 next_s <= in_3;
 elsif(CoinIn = "11") then
 phone <= '0';
 CoinOut <= "10";
 next_s <= in_6;
 end if;
 
 when in_3 =>
 phone <= '0';
 CoinOut <= "01";
 next_s <= phone_out;

 when in_6 =>
 phone <= '0';
 CoinOut <= "01";
 next_s <= in_5;

 when in_5 => 
 phone <= '0';
 CoinOut <= "10";
 next_s <= change_1;

 when change_1 => 
 phone <= '0';
 CoinOut <= "01";
 next_s <= phone_out;

 when phone_out =>
 phone <= '1';
 CoinOut <= "00";
 next_s <= put_money; 
end case;
end process;

end behavior;
