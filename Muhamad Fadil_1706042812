--try in VHDL
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;




entity shift_register is
    Port (
    	        input1,input2,input3,input4  :in std_logic;--input 1 is MSB
		reg					     :inout std_logic_vector(1 to 4);
	        output                                   :inout std_logic_vector(1 to 4);
		   input_accept	                     :in std_logic;
		   siso			             :in std_logic;
		   sipo			             :in std_logic;
		   piso			             :in std_logic;
		   pipo			             :in std_logic;
		   reset			             :in std_logic;
		   clk			                   : in std_logic
	   );

end shift_register;

architecture Behavioral of shift_register is
 signal count:std_logic_vector(2 downto 0):="000";

begin
SHIFT_REG: process(clk)
begin
	    if clk'event and clk='1' then

--1. in-out
		if siso='1' then
           if(reset='1') then
                count<="000";	     
			 reg<="0000";
			 output<="0000";
	       end if;--reset
		  			      
		 if input_accept='1' then
	--Start serial in
	          
		     if count="000" then
			   count<=count+1;
			   reg<=input4 & "000";--(others=>'0');
       
        	    elsif count="001" then
		       
			   count<=count+1;
			   reg<=input3 & reg(1 to 3);
			
		    elsif count="010" then
			  
			   count<=count+1;
			   reg<=input2 & reg(1 to 3);
			
			elsif count="011" then
			   
			    count<=count+1;
			    reg<=input1 & reg(1 to 3);

----2. Start serial out
			 elsif count="100" then
			 
				 count<=count+1;
	                        output<=reg(4) & "000";--(others=>'0');
				 reg<='0' & reg(1 to 3);





			 elsif count="101" then
			    
			    count<=count+1;
			    output<=reg(4) & output(1 to 3);
			   reg<='0' & reg(1 to 3);


			 elsif count="110" then
			  
				output<=reg(4) & output(1 to 3);
				reg<='0' & reg(1 to 3);

			 else
				
				 output<=reg(4) & output(1 to 3);
				 reg<='0' & reg(1 to 3);
                 end if;
		end if;--input_accept

	---Serial in-Parallel out     

	   elsif sipo='1' then
			if(reset='1') then
		     
			   count<="000";		   
			    reg<="0000";
			 output<="0000";	     
	                 end if;--reset

		       if input_accept='1' then
	--Start serial in 
		     if count="000" then

			   count<=count+1;	   
			    reg<=input4 & "000";--(others=>'0');	     

      	    elsif count="001" then
		        
			   count<=count+1;
			   reg<=input3 & reg(1 to 3);
			
			elsif count="010" then
			  
			   count<=count+1;
			    reg<=input2 & reg(1 to 3);
			
			elsif count="011" then
			    
			    count<=count+1;
			     reg<=input1 & reg(1 to 3);
	 --Start parallel out
			else
			    
				 output<=reg;
				 reg<="0000";
                end if;
		   end if;--input_accept






        --Parallel in-Serial out

		 elsif piso='1' then
		    	if(reset='1') then
		      
			   count<="000";
			   output<="0000";
			   reg<="0000";
	          end if;--reset

		    if input_accept='1' then

		   --Start  parallel in
			    if count="000" then
			    
                             count<=count+1;
			    reg<=input1 & input2 & input3 & input4;
				 
		   ---Start serial out	   

			   elsif count="001" then
				
				 count<=count+1;

				 output<=reg(4) & "000";--(others=>'0');
				 reg<='0' & reg(1 to 3);

			 elsif count="010" then
				
                                 count<=count+1;
				output<=reg(4) & output(1 to 3);
				reg<='0' & reg(1 to 3);

			 elsif count="011" then
			
				count<=count+1;
				 output<=reg(4) & output(1 to 3);
				reg<='0' & reg(1 to 3);

			 else
			    	
				 output<=reg(4) & output(1 to 3);
				 reg<='0' & reg(1 to 3);
			 end if;           
            
		   end if;--input_accept


--3. in-out parrarel
		 elsif pipo='1' then
		      if(reset='1') then
		      
			   count<="000";
			   output<="0000";
			   reg<="0000";
			  end if;







			  
			 if input_accept='1' then

		--Start parallel in	   
			   if count="000" then
			    
			    count<=count+1;			   
			     reg<=input1 & input2 & input3 & input4;
			   else
		 --Start parallel out
				
				 output<=reg;
				 reg<="0000";

			    end if;
			 end if;--input_accept;    
	   	 end if;--end of select1,select2,select3,select4
	  end if;-- clk

end process SHIFT_REG;
end Behavioral;



